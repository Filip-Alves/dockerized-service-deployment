name: Deploy Docker Service

on:
  push:
    branches: ["main"]

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    outputs:
      image_name: ${{ steps.prepare.outputs.image_name }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare image name
        id: prepare
        run: |
          echo "image_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ steps.prepare.outputs.image_name }}:${{ github.sha }}
            ghcr.io/${{ steps.prepare.outputs.image_name }}:latest

  deploy:
    name: Deploy to Server
    runs-on: self-hosted
    needs: build-and-push

    steps:
      - name: Deploy locally
        env:
          IMAGE_NAME: ghcr.io/${{ needs.build-and-push.outputs.image_name }}
          IMAGE_TAG: ${{ github.sha }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          APP_USERNAME: ${{ secrets.APP_USERNAME }}
          APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
          APP_SECRET_MESSAGE: ${{ secrets.APP_SECRET_MESSAGE }}
        run: |
          echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin

          docker pull "$IMAGE_NAME:$IMAGE_TAG"

          docker stop node-service 2>/dev/null || true
          docker rm node-service 2>/dev/null || true

          cat > .env.prod << EOF
          APP_USERNAME=$APP_USERNAME
          APP_PASSWORD=$APP_PASSWORD
          APP_SECRET_MESSAGE=$APP_SECRET_MESSAGE
          EOF

          docker run -d \
            --name node-service \
            --restart always \
            -p 3000:3000 \
            --env-file .env.prod \
            "$IMAGE_NAME:$IMAGE_TAG"

          rm -f .env.prod
